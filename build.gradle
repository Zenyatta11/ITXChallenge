plugins {
    id 'org.springframework.boot' version '3.1.0'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'com.github.spotbugs' version '5.0.13'
    id 'org.sonarqube' version '3.3'
    id 'checkstyle'
    id 'jacoco'
    id 'java'
    id 'org.openapi.generator' version '6.2.0'
}

group = 'com.zenyatta'
version = '0.0.1'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.24'
	annotationProcessor 'org.projectlombok:lombok:1.18.24'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.1.5'
	implementation 'org.springframework.boot:spring-boot-starter-aop:3.1.5'
	implementation 'org.springframework.boot:spring-boot-starter-web:3.1.5'
	implementation 'org.springframework.boot:spring-boot-starter-webflux:3.1.5'
    
    implementation 'com.sun.mail:javax.mail:1.6.2'
	implementation 'net.logstash.logback:logstash-logback-encoder:7.2'
	implementation 'org.postgresql:postgresql'
	implementation 'org.apache.commons:commons-text:1.10.0'
	implementation 'org.yaml:snakeyaml:2.0'
    
	implementation 'org.springframework.boot:spring-boot-starter-validation:3.1.5'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.0'
	testImplementation 'org.springframework.boot:spring-boot-starter-test:3.1.5'
}

tasks.withType(Checkstyle) {
    reports {
        xml.required = false
        html.required = true
    }
}

spotbugsMain {
    excludeFilter.set(file("$rootProject.projectDir/config/build/spotbugs_exclude_filter.xml")) 
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

spotbugsTest {
    enabled = false
}

checkstyle {
    toolVersion "10.4"
    configFile = file("$rootProject.projectDir/config/build/checkstyle_config.xml")
}

test {
    useJUnitPlatform() 
    reports {
        junitXml.required = true
        html.required = true
        junitXml.destination = file("$buildDir/reports/tests/")
    }
    
    jacocoTestCoverageVerification.dependsOn jacocoTestReport
    finalizedBy jacocoTestCoverageVerification
}

jar {
    enabled = false
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.required = true
    }
    dependsOn test
}

def testExcludeList = [
        "**/com/alpharius/propi/PropiApplication*", // spring code
        "**/com/alpharius/propi/config*" // spring code
]

sonarqube {
    properties {
        property "sonar.coverage.exclusions", testExcludeList
    }
}

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude:  testExcludeList)
        }))
    }
    violationRules {
        rule {
            limit {
                minimum = 0.8
            }
        }
    }
}

apply from: "$projectDir/gradle/preCommit.gradle"
